import re
import sys
import xml.etree.ElementTree as ET
from dataclasses import dataclass
from pathlib import Path


@dataclass
class FnSite:
    id: int
    position: tuple[int, int]
    mining_grade: str
    revenue_grade: str
    combat_grade: str
    sightseeing_spots: int
    ore: list[str]


def main():
    sites: dict[int, FnSite] = {}

    # Load FN Site metadata.
    sites_csv_path = Path(sys.argv[1])
    with sites_csv_path.open("rt") as sites_csv:
        for line in sites_csv:
            line = line.strip()
            if line.startswith("#") or len(line) == 0:
                # Comment
                continue
            parts = line.split(",")
            site = FnSite(
                id=int(parts[0], 10),
                position=(0, 0),
                mining_grade=parts[1],
                revenue_grade=parts[2],
                combat_grade=parts[3],
                sightseeing_spots=int(parts[4], 10),
                ore=parts[5:],
            )
            sites[site.id] = site

    # Load node map positions.
    svg_path = Path(sys.argv[2])
    svg = ET.parse(svg_path)
    nodes = svg.findall("./{http://www.w3.org/2000/svg}g[@id='nodeslayer']/{http://www.w3.org/2000/svg}image")
    for node in nodes:
        match = re.match(r"FN(\d+)", node.get("{http://www.inkscape.org/namespaces/inkscape}label"))
        if match is None:
            continue
        name = int(match.group(1), 10)
        x = int(node.get("x"))
        y = int(node.get("y"))
        width = int(node.get("width"))
        height = int(node.get("height"))
        # Origin is top-left.
        sites[name].position = (int(x + (width / 2)), int(y + (height / 2)))

    # Write CPP definition file.
    out_path = Path(sys.argv[3])
    with out_path.open('w') as out:
        sites_list = list(sites.values())
        sites_list.sort(key=lambda v: v.id)
        indent = ""
        out.write(f"/* THIS FILE IS AUTOMATICALLY GENERATED */\n")
        out.write("\n")
        out.write("#include <QHash>\n")
        out.write("#include \"FnSite.h\"\n")
        out.write("\n")
        out.write(f"{indent}const QHash<unsigned int, FnSite> FnSite::kAllSites {{\n")
        indent = "    "
        for site in sites_list:
            out.write(
                f"{indent}{{{site.id}, {{.id={site.id}, .position={{{site.position[0]}, {site.position[1]}}}, .miningGrade=FnSite::Grade::{site.mining_grade}, .revenueGrade=FnSite::Grade::{site.revenue_grade}, .combatGrade=FnSite::Grade::{site.combat_grade}, .sightseeingSpots={site.sightseeing_spots}, .ore={{{", ".join([f"\"{v}\"" for v in site.ore])}}}}}}},\n"
            )
        indent = ""
        out.write(f"{indent}}};\n")


if __name__ == "__main__":
    main()
